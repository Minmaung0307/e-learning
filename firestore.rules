rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- helpers ----
    function isAuthed() { return request.auth != null; }
    function userRole() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role;
    }
    function isAdmin() { return isAuthed() && userRole() == "admin"; }
    function isInstructor() { return isAuthed() && userRole() == "instructor"; }
    function isTeacher() { return isAdmin() || isInstructor(); }
    function isOwnerUidNew() { return isAuthed() && request.resource.data.uid == request.auth.uid; }
    function isOwnerUid(res) { return isAuthed() && res.data.uid == request.auth.uid; }

    // ---- courses ----
    match /courses/{courseId} {
      allow read: if true;

      // Only instructors/admins can create courses, and the ownerUid must be themselves
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;

      // Owner instructor can update/delete their own course; admins can update anything
      allow update, delete:
        if isAdmin() ||
           (isInstructor() && resource.data.ownerUid == request.auth.uid);
    }

    // ---- profiles ----
    match /profiles/{uid} {
      allow read: if isAuthed();
      allow create, update, delete: if isAdmin() || request.auth.uid == uid;
    }

    // ---- roles ----
    match /roles/{uid} {
      allow read: if isAuthed();
      allow write: if isAdmin(); // manage roles through admin only
    }

    // ---- enrollments ----
    match /enrollments/{id} {
      allow read: if isAuthed();
      // users can create their own enrollment; teachers may also create (e.g. batch add)
      allow create: if isOwnerUidNew() || isTeacher();
      allow update, delete: if isAdmin() || isOwnerUid(resource);
    }

    // ---- quizzes (finals) ----
    match /quizzes/{id} {
      allow read: if true;
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete:
        if isAdmin() || (isInstructor() && resource.data.ownerUid == request.auth.uid);
    }

    // ---- attempts ----
    match /attempts/{id} {
      allow read: if isAuthed(); // keep it simple; tighten later if needed
      allow create: if isOwnerUidNew();
      allow update, delete: if isAdmin() || isOwnerUid(resource);
    }

    // ---- tasks ----
    match /tasks/{id} {
      allow read: if isAuthed() && (resource.data.uid == request.auth.uid || isTeacher());
      allow create: if isOwnerUidNew();
      allow update, delete: if isOwnerUid(resource) || isAdmin();
    }

    // ---- chat messages ----
    match /messages/{id} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin() || resource.data.uid == request.auth.uid;
    }

    // ---- announcements ----
    match /announcements/{id} {
      allow read: if true;
      allow create, update, delete: if isTeacher();
    }

    // ---- demo payments ----
    match /payments/{id} {
      allow read: if isAdmin() || isOwnerUid(resource);
      allow create: if isOwnerUidNew();
      allow update, delete: if isAdmin();
    }
  }
}