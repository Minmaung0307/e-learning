rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function signedIn() { return request.auth != null; }

    // Checks admin flag in /roles/{uid} (optional collection you manage)
    function isAdmin() {
      return signedIn()
        && exists(/databases/$(database)/documents/roles/$(request.auth.uid))
        && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    // Use only where appropriate: resource.* for reads/updates, request.resource.* for creates/updates
    function isOwner()   { return signedIn() && resource.data.uid == request.auth.uid; }
    function isCreator() { return signedIn() && request.resource.data.uid == request.auth.uid; }

    /* ---------- Public content ---------- */
    match /courses/{id}        { allow read: if true; allow write: if isAdmin(); }
    match /quizzes/{id}        { allow read: if true; allow write: if isAdmin(); }
    match /announcements/{id}  { allow read: if true; allow write: if isAdmin(); }

    /* ---------- Profiles ---------- */
    match /profiles/{uid} {
      allow read: if signedIn();
      allow create: if isCreator();               // request.resource.data.uid == auth.uid
      allow update, delete: if isOwner() || isAdmin(); // resource.data.uid == auth.uid
    }

    /* ---------- Top-level user-scoped collections ---------- */
    match /enrollments/{docId} {
      // For queries, make sure the client uses .where('uid','==', auth.uid)
      allow read: if signedIn() && isOwner();
      allow create: if isCreator();
      allow update, delete: if isOwner() || isAdmin();
    }
    match /progress/{docId} {
      allow read: if signedIn() && isOwner();
      allow create: if isCreator();
      allow update, delete: if isOwner() || isAdmin();
    }
    match /attempts/{docId} {
      allow read: if signedIn() && isOwner();
      allow create: if isCreator();
      allow update, delete: if isOwner() || isAdmin();
    }
    match /tasks/{docId} {
      allow read: if signedIn() && isOwner();
      allow create: if isCreator();
      allow update, delete: if isOwner() || isAdmin();
    }

    /* ---------- If you also store under users/{uid}/... ---------- */
    match /users/{uid} {
      // Optional: protect the user doc itself
      allow read, write: if isAdmin() || (signedIn() && request.auth.uid == uid);

      match /enrollments/{docId} {
        allow read: if signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow create: if signedIn() && request.resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid) || isAdmin();
      }
      match /progress/{docId} {
        allow read: if signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow create: if signedIn() && request.resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid) || isAdmin();
      }
      match /attempts/{docId} {
        allow read: if signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow create: if signedIn() && request.resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid) || isAdmin();
      }
      match /tasks/{docId} {
        allow read: if signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow create: if signedIn() && request.resource.data.uid == request.auth.uid && request.auth.uid == uid;
        allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid && request.auth.uid == uid) || isAdmin();
      }
    }

    /* ---------- Collection group support (works anywhere in the tree) ---------- */
    match /{path=**}/enrollments/{docId} {
      allow read: if signedIn() && resource.data.uid == request.auth.uid;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid) || isAdmin();
    }
    match /{path=**}/progress/{docId} {
      allow read: if signedIn() && resource.data.uid == request.auth.uid;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid) || isAdmin();
    }
    match /{path=**}/attempts/{docId} {
      allow read: if signedIn() && resource.data.uid == request.auth.uid;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid) || isAdmin();
    }
    match /{path=**}/tasks/{docId} {
      allow read: if signedIn() && resource.data.uid == request.auth.uid;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if (signedIn() && resource.data.uid == request.auth.uid) || isAdmin();
    }
  }
}