rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isSelf(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == "admin";
    }

    function isInstructor() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == "instructor";
    }

    // roles — admin only write, admins can read, others can read their own role doc
    match /roles/{uid} {
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      allow write: if isAdmin();
    }

    // profiles — user can read/write own, admin can read/write all
    match /profiles/{uid} {
      allow read: if isSignedIn();
      allow write: if isSelf(uid) || isAdmin();
    }

    // courses — everyone signed-in can read; write by instructors/admin
    match /courses/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin() || isInstructor();
    }

    // enrollments — create/read own only
    match /enrollments/{id} {
      allow read: if isSignedIn() && (resource.data.uid == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // quizzes — read all; create/update by instructors/admin
    match /quizzes/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin() || isInstructor();
    }

    // attempts — user reads/writes own
    match /attempts/{id} {
      allow read: if isSignedIn() && (resource.data.uid == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }

    // tasks — user reads/writes own
    match /tasks/{id} {
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // messages — signed-in read/write (course chat). You can tighten later.
    match /messages/{id} {
      allow read, create: if isSignedIn();
      allow update, delete: if false;
    }

    // notes — user reads/writes own
    match /notes/{id} {
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // announcements — read all; write by instructor/admin
    match /announcements/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin() || isInstructor();
    }
  }
}