rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- auth & role helpers ---
    function authed() { return request.auth != null; }
    function roleDoc() {
      return authed()
        ? get(/databases/$(database)/documents/roles/$(request.auth.uid))
        : null;
    }
    function userRole() { return roleDoc() == null ? null : roleDoc().data.role; }
    // IMPORTANT: store roles **lowercase** ("admin" | "instructor" | "student")
    function isAdmin() { return authed() && userRole() == "admin"; }
    function isInstructor() { return authed() && userRole() == "instructor"; }
    function isTeacher() { return isAdmin() || isInstructor(); }

    // --- courses ---
    match /courses/{courseId} {
      allow read: if true;

      // create by teachers; also require they set themselves as owner
      allow create: if isTeacher() && request.resource.data.ownerUid == request.auth.uid;

      // update/delete by admin or the instructor owner
      allow update, delete:
        if isAdmin() || (isInstructor() && resource.data.ownerUid == request.auth.uid);
    }

    // --- quizzes (finals) ---
    match /quizzes/{quizId} {
      allow read: if true;
      allow create: if isTeacher();
      allow update, delete:
        if isAdmin() || (isInstructor() && resource.data.ownerUid == request.auth.uid);
    }

    // --- attempts (students write their own) ---
    match /attempts/{attemptId} {
      allow read: if authed() && (resource.data.uid == request.auth.uid || isTeacher());
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }

    // --- enrollments (student can enroll self) ---
    match /enrollments/{enrollmentId} {
      allow read: if authed();
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // --- messages (simple chat policy; tighten later if you want) ---
    match /messages/{messageId} {
      allow read, create: if authed();
      allow update, delete: if isAdmin() || (authed() && resource.data.uid == request.auth.uid);
    }

    // --- tasks (user-private) ---
    match /tasks/{taskId} {
      allow create: if authed() && request.resource.data.uid == request.auth.uid;
      allow read, update, delete: if authed() && resource.data.uid == request.auth.uid;
    }

    // --- announcements ---
    match /announcements/{id} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // --- profiles ---
    match /profiles/{uid} {
      allow read: if authed();
      allow create, update: if authed() && request.auth.uid == uid;
      allow delete: if isAdmin() || (authed() && request.auth.uid == uid);
    }

    // --- roles ---
    match /roles/{uid} {
      // allow each user to read their own role so the app can show it; admins can read all
      allow read: if (authed() && request.auth.uid == uid) || isAdmin();
      // only admins can write roles
      allow create, update, delete: if isAdmin();
    }

    // --- payments (demo only) ---
    match /payments/{id} {
      allow read, create: if authed();
      allow update, delete: if isAdmin();
    }
  }
}