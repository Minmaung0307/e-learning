// Firestore security rules (essentials for this app)
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function signedIn() { return request.auth != null; }
    function isAdmin() {
      return signedIn() &&
             get(/databases/$(db)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    /* Publicly readable content */
    match /courses/{id}  { allow read: if true; allow write: if isAdmin(); }
    match /quizzes/{id}  { allow read: if true; allow write: if isAdmin(); }
    match /announcements/{id} { allow read: if true; allow write: if isAdmin(); }

    /* User-scoped docs â€” user can only see their own */
    match /profiles/{uid} {
      allow read: if signedIn();
      allow create, update, delete: if signedIn() && request.auth.uid == uid || isAdmin();
    }

    match /enrollments/{docId} {
      allow read, create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid || isAdmin();
    }

    match /attempts/{docId} {
      allow read, create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid || isAdmin();
    }

    match /tasks/{docId} {
      allow read, create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid || isAdmin();
    }

    match /progress/{docId} {
      // docId looks like "<uid>_<courseId>", but we check the stored uid field
      allow read, create:  if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid || isAdmin();
    }

    match /messages/{docId} {
      allow read, create: if signedIn();
      allow update, delete: if isAdmin() || (signedIn() && resource.data.uid == request.auth.uid);
    }

    match /payments/{docId} {
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow read: if isAdmin();   // or false if you prefer private
    }

    match /roles/{uid} {
      allow read: if signedIn() && (request.auth.uid == uid || isAdmin());
      allow write: if isAdmin();
    }
  }
}