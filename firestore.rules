rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function roleOf(uid) {
      return get(/databases/$(database)/documents/roles/$(uid)).data.role;
    }
    function isAdmin() {
      return isSignedIn() && roleOf(request.auth.uid) == 'admin';
    }
    function isInstructor() {
      return isSignedIn() && (roleOf(request.auth.uid) == 'instructor' || roleOf(request.auth.uid) == 'admin');
    }
    function isOwner(resourceData) {
      return isSignedIn() && resourceData.ownerUid == request.auth.uid;
    }

    // roles — only admins can write; anyone signed in can read (optional)
    match /roles/{uid} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // profiles — user can read all; write only own; admins can write all
    match /profiles/{uid} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update, delete: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
    }

    // courses — read for all signed-in; create by instructor/admin; update by owner or instructor/admin
    match /courses/{id} {
      allow read: if isSignedIn();
      allow create: if isInstructor();
      allow update: if isInstructor() || isOwner(resource.data);
      allow delete: if isInstructor() || isOwner(resource.data);
    }

    // enrollments — user creates/reads own; admin/instructor can read all
    match /enrollments/{id} {
      allow read: if isSignedIn() && (isInstructor() || request.resource == null || resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
    }

    // quizzes — instructors/admins manage; everyone can read to take
    match /quizzes/{id} {
      allow read: if isSignedIn();
      allow create: if isInstructor();
      allow update, delete: if isInstructor() || isOwner(resource.data);
    }

    // attempts — user writes own attempt; reads own; admin/instructor can read
    match /attempts/{id} {
      allow read: if isSignedIn() && (isInstructor() || resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
    }

    // tasks — private per user
    match /tasks/{id} {
      allow read, update, delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // messages — chat
    match /messages/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
    }

    // announcements — admins only write, all signed-in can read
    match /announcements/{id} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // payments (demo)
    match /payments/{id} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin();
    }
  }
}